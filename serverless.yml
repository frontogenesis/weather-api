service: api-v1

frameworkVersion: ">=1.1.0 <3.0.0"
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  profile: serverless-admin
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  apiGateway:
    shouldStartNameWithService: true
  #   DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  app:
    handler: app.handler
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'

# resources:
#   Resources:
#     TodosDynamoDbTable:
#       Type: 'AWS::DynamoDB::Table'
#       DeletionPolicy: Retain
#       Properties:
#         AttributeDefinitions:
#           -
#             AttributeName: id
#             AttributeType: S
#         KeySchema:
#           -
#             AttributeName: id
#             KeyType: HASH
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#         TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  - serverless-offline